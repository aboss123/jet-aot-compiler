#include <cstdio>
#include <cstdlib>
#include <cstdint>
#include <vector>
#include <string>
#include <cstring>
#include <fstream>
#include "assemblers/x64-codegen.h"

using namespace nextgen::jet::x64;

// Emit a simple program into an assembly file that macOS 'clang -arch x86_64' can assemble/link
// The program: int main() { return 42; }
int main(int argc, char** argv) {
  const char* out_s = (argc > 1) ? argv[1] : "generated.s";

  Assembler a(256);
  Label Lstr;
  const char* msg = "Hello World\n";
  size_t msg_len = std::strlen(msg);

  // write(1, msg, len)
  a.movq(AX, Imm64{0x2000004ULL});      // SYS_write
  a.movq(DI, Imm64{1});                 // fd = 1
  a.leaq_rip_label(SI, Lstr);           // rsi = &msg
  a.movq(DX, Imm64{(uint64_t)msg_len}); // rdx = len
  a.syscall();
  // exit(0)
  a.movq(AX, Imm64{0x2000001ULL});      // SYS_exit
  a.movd(DI, Imm32{0});                 // status
  a.syscall();
  // Data
  a.align_to(4);
  a.place_label(Lstr);
  for (const char* p = msg; *p; ++p) a.emit_u8((ubyte)*p);
  a.emit_u8(0);

  std::ofstream os(out_s);
  if (!os) { fprintf(stderr, "Failed to open %s\n", out_s); return 1; }

  os << ".text\n";
  os << ".globl _main\n";
  os << "_main:\n";
  // Copy generated bytes inline as a single .byte list
  os << "  .byte ";
  for (size_t i = 0; i < a.bytes(); ++i) {
    static const char* hex = "0123456789ABCDEF";
    unsigned v = a.spill()[i];
    os << "0x" << hex[(v >> 4) & 0xF] << hex[v & 0xF];
    if (i + 1 < a.bytes()) os << ", ";
  }
  os << "\n";
  // Program exits via syscall
  os.close();

  fprintf(stdout, "Wrote %s (assemble with: clang -arch x86_64 %s -o generated && ./generated)\n", out_s, out_s);
  return 0;
}


