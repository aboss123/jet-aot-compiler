name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            compiler: gcc
            cc: gcc-11
            cxx: g++-11
          - os: ubuntu-latest
            compiler: clang
            cc: clang-14
            cxx: clang++-14
          - os: macos-latest
            compiler: gcc
            cc: gcc-11
            cxx: g++-11
          - os: macos-latest
            compiler: clang
            cc: clang
            cxx: clang++

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y gcc-11 g++-11
        else
          sudo apt-get install -y clang-14 clang++-14
        fi
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc@11
        fi
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=${{ matrix.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}
    
    - name: Build
      run: cmake --build build --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
    
    - name: Run Tests
      run: |
        cd build
        ./test_suite
    
    - name: Test Examples (if built)
      run: |
        cd build
        if [ -f examples/ir_hello_world ]; then
          ./examples/ir_hello_world
        fi
        if [ -f examples/cross_platform_demo ]; then
          ./examples/cross_platform_demo
        fi

  build-debug:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build gcc-11 g++-11 valgrind
    
    - name: Configure CMake (Debug)
      run: |
        cmake -B build-debug \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=gcc-11 \
          -DCMAKE_CXX_COMPILER=g++-11 \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined -g"
    
    - name: Build Debug
      run: cmake --build build-debug --parallel $(nproc)
    
    - name: Run Tests with AddressSanitizer
      run: |
        cd build-debug
        ./test_suite
      env:
        ASAN_OPTIONS: detect_leaks=1:abort_on_error=1

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.3
    
    - name: Configure CMake
      run: |
        cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: cmake --build build --config Release --parallel
    
    - name: Run Tests
      run: |
        cd build/Release
        ./test_suite.exe